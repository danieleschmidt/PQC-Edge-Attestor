# Production Dockerfile for PQC Edge Attestor
# Multi-stage build for optimized production image

# Build stage
FROM node:18-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    gcc \
    libc-dev \
    linux-headers

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install all dependencies (including dev dependencies for build)
RUN npm ci --only=production --ignore-scripts

# Copy source code
COPY . .

# Build the application (if build step is needed)
RUN npm run build || true

# Remove development dependencies
RUN npm prune --production

# Production stage
FROM node:18-alpine AS production

# Create non-root user for security
RUN addgroup -g 1001 -S pqcuser && \
    adduser -S pqcuser -u 1001

# Install production runtime dependencies
RUN apk add --no-cache \
    curl \
    ca-certificates \
    tini

# Set working directory
WORKDIR /app

# Copy built application from builder stage
COPY --from=builder --chown=pqcuser:pqcuser /app/node_modules ./node_modules
COPY --from=builder --chown=pqcuser:pqcuser /app/src ./src
COPY --from=builder --chown=pqcuser:pqcuser /app/package*.json ./

# Create necessary directories
RUN mkdir -p logs data certificates config && \
    chown -R pqcuser:pqcuser /app

# Switch to non-root user
USER pqcuser

# Expose application port
EXPOSE 8443

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f https://localhost:8443/health || exit 1

# Use tini as init system
ENTRYPOINT ["/sbin/tini", "--"]

# Start the application
CMD ["node", "src/index.js"]