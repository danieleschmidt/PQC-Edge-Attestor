version: '3.8'

name: 'terragon-pqc-production'

services:
  # Main PQC Edge Attestor Service - Generation 5
  pqc-edge-attestor:
    build:
      context: .
      dockerfile: Dockerfile.prod
      args:
        NODE_ENV: production
        BUILD_VERSION: ${BUILD_VERSION:-latest}
    image: terragon/pqc-edge-attestor:${TAG:-latest}
    container_name: pqc-edge-attestor-prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - LOG_LEVEL=info
      - ENABLE_SWAGGER=false
      - CORS_ORIGINS=https://pqc.terragonlabs.com,https://api.terragonlabs.com
      - JWT_SECRET=${JWT_SECRET}
      - API_KEY=${API_KEY}
      - QUANTUM_PROVIDER_TOKEN=${QUANTUM_PROVIDER_TOKEN}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      # Generation 5 Configuration
      - THREAT_INTELLIGENCE_ENABLED=true
      - ADAPTIVE_SECURITY_ENABLED=true
      - AUTONOMOUS_PERFORMANCE_ENABLED=true
      - QUANTUM_CLOUD_ENABLED=true
      - ML_OPTIMIZATION_ENABLED=true
      - QUANTUM_THREAT_PROTECTION=true
      - REAL_TIME_MONITORING=true
      - PREDICTIVE_SCALING=true
      # Database Configuration
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      # Monitoring and Observability
      - METRICS_ENABLED=true
      - JAEGER_ENDPOINT=${JAEGER_ENDPOINT}
      - PROMETHEUS_ENDPOINT=${PROMETHEUS_ENDPOINT}
      # Security Configuration
      - SECURITY_SCAN_ENABLED=true
      - VULNERABILITY_CHECK_INTERVAL=3600000
      - QUANTUM_KEY_ROTATION_INTERVAL=86400000
    ports:
      - "3000:3000"
      - "9090:9090"  # Metrics endpoint
    volumes:
      - pqc-logs:/app/logs
      - pqc-certs:/app/certs:ro
      - pqc-cache:/app/cache
    networks:
      - pqc-network
      - monitoring-network
    depends_on:
      - postgres
      - redis
      - quantum-simulator
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 60s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL Database with High Availability
  postgres:
    image: postgres:15-alpine
    container_name: postgres-pqc-prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-pqc_edge_attestor}
      - POSTGRES_USER=${POSTGRES_USER:-pqc_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - pqc-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-pqc_user} -d ${POSTGRES_DB:-pqc_edge_attestor}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for Caching and Session Management
  redis:
    image: redis:7-alpine
    container_name: redis-pqc-prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - pqc-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Quantum Computing Simulator (Local Fallback)
  quantum-simulator:
    build:
      context: ./quantum-simulator
      dockerfile: Dockerfile
    image: terragon/quantum-simulator:${TAG:-latest}
    container_name: quantum-simulator-prod
    restart: unless-stopped
    environment:
      - MAX_QUBITS=64
      - SIMULATION_THREADS=8
      - MEMORY_LIMIT=8G
      - QUANTUM_NOISE_MODEL=realistic
    ports:
      - "8080:8080"
    volumes:
      - quantum-cache:/app/cache
    networks:
      - pqc-network
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 60s
      timeout: 15s
      retries: 3

  # NGINX Load Balancer and Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: nginx-pqc-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/sites:/etc/nginx/sites-available:ro
      - pqc-certs:/etc/nginx/certs:ro
      - nginx-cache:/var/cache/nginx
      - nginx-logs:/var/log/nginx
    networks:
      - pqc-network
      - public-network
    depends_on:
      - pqc-edge-attestor
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-pqc-prod
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - monitoring-network
    depends_on:
      - pqc-edge-attestor
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-pqc-prod
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - monitoring-network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger-pqc-prod
    restart: unless-stopped
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector
    volumes:
      - jaeger-data:/badger
    networks:
      - monitoring-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # Security Scanner (Periodic)
  security-scanner:
    build:
      context: ./security
      dockerfile: Dockerfile.scanner
    image: terragon/security-scanner:${TAG:-latest}
    container_name: security-scanner-prod
    restart: unless-stopped
    environment:
      - SCAN_INTERVAL=3600
      - THREAT_DB_URL=${THREAT_DB_URL}
      - ALERT_WEBHOOK=${SECURITY_ALERT_WEBHOOK}
      - LOG_LEVEL=info
    volumes:
      - security-reports:/app/reports
      - pqc-logs:/app/logs:ro
    networks:
      - pqc-network
      - monitoring-network
    depends_on:
      - pqc-edge-attestor
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.1'
          memory: 256M

volumes:
  postgres-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/pqc/data/postgres
  
  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/pqc/data/redis
  
  prometheus-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/pqc/data/prometheus
  
  grafana-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/pqc/data/grafana
  
  jaeger-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/pqc/data/jaeger
  
  pqc-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/pqc/logs
  
  pqc-certs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/pqc/certs
  
  pqc-cache:
    driver: local
  
  quantum-cache:
    driver: local
  
  nginx-cache:
    driver: local
  
  nginx-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/pqc/logs/nginx
  
  security-reports:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/pqc/security-reports

networks:
  pqc-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  
  monitoring-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
  
  public-network:
    driver: bridge